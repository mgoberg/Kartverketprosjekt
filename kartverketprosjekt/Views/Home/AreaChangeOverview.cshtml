@model List<kartverketprosjekt.Models.AreaChangeModel>

@{
    ViewData["Title"] = "Korrigeringsoversikt";
}

<h2>Korrigeringsoversikt</h2>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>GeoJSON</th>
            <th>Beskrivelse</th>
        </tr>
    </thead>

    <tbody>

        @foreach (var change in Model)
        {
            <tr>
                <td>

                    @change.ID

                </td>
                <td>

                    @change.GeoJSON

                </td>
                <td>

                    @change.Description

                </td>
            </tr>
        }
    </tbody>

</table>

<div id="map"></div>

@section Scripts {
    <script>
        var map = L.map('map').setView([65, 12], 4);

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '&copy; <a href="http://www.openstreetmap.org/">OpenStreetMap</a>' }).addTo(map);

        var changes = @Json.Serialize(Model);

        changes.forEach(function (change) {
            var geoJsonData = JSON.parse(change.geoJSON);

            L.geoJSON(geoJsonData).addTo(map);

            var layer = L.geoJSON(geoJsonData).bindPopup(change.description);
            layer.addTo(map);

            
            var coordinates = geoJsonData.geometry.coordinates;

            if (geoJsonData.geometry.type === 'LineString') {
                // Calculate the center point of the line
                var lineCoordinates = coordinates;
                var lineCenter = calculateLineCenter(lineCoordinates);

                // Extracting latitude and longitude of the line center
                var latitude = lineCenter[1];
                var longitude = lineCenter[0];

                map.flyTo([latitude, longitude], 15); // Fly to the center of the line
            } else if (geoJsonData.geometry.type === 'Polygon') {
                // Calculate the center point of the polygon
                var polygonCoordinates = coordinates[0]; // Assuming the first array of coordinates represents the outer ring of the polygon
                var polygonCenter = calculatePolygonCenter(polygonCoordinates);

                // Extracting latitude and longitude of the polygon center
                var latitude = polygonCenter[1];
                var longitude = polygonCenter[0];

                map.flyTo([latitude, longitude], 15); // Fly to the center of the polygon
            } else {
                // Extracting latitude and longitude of the point
                var latitude = coordinates[1];
                var longitude = coordinates[0];

                map.flyTo([latitude, longitude], 15); // Fly to the point
            }

            // Function to calculate the center point of a line
            function calculateLineCenter(coordinates) {
                var totalPoints = coordinates.length;
                var sumLat = 0;
                var sumLng = 0;

                for (var i = 0; i < totalPoints; i++) {
                    sumLat += coordinates[i][1];
                    sumLng += coordinates[i][0];
                }

                var centerLat = sumLat / totalPoints;
                var centerLng = sumLng / totalPoints;

                return [centerLng, centerLat];
            }

            // Function to calculate the center point of a polygon
            function calculatePolygonCenter(coordinates) {
                var totalPoints = coordinates.length;
                var sumLat = 0;
                var sumLng = 0;

                for (var i = 0; i < totalPoints; i++) {
                    sumLat += coordinates[i][1];
                    sumLng += coordinates[i][0];
                }

                var centerLat = sumLat / totalPoints;
                var centerLng = sumLng / totalPoints;

                return [centerLng, centerLat];
            }
        });
    </script>
}