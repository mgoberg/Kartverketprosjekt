@model kartverketprosjekt.Models.SakModel
@{
    ViewData["Title"] = "Korrigeringsoversikt";
}

<h2>Kvittering</h2>
<a asp-controller="Home" asp-action="Index">Tilbake til forside</a>

<p class="alert alert-success">Din sak er lagret og vil bli behandlet av en saksbehandler fortløpende</p>

<div class="dashboard">
    <div class="dashboard-box">
        <div id="map"></div>
    </div>
    <div class="dashboard-box">
        <p><strong>Referansernummer:</strong> @Model.id </p>
        <p><strong>Type:</strong> @Model.type_feil</p>
        <p><strong>Beskrivelse:</strong> @Model.beskrivelse</p>
        <p><strong>Opprettet dato:</strong> @Model.opprettet_dato</p>
        <p><strong>Fylke:</strong> @Model.Fylkesnavn</p>
        <p><strong>Kommune:</strong> @Model.Kommunenavn</p>
        <p>
            <strong>Kartlag:</strong>
            @{
                string kartlagNavn = "Ukjent kartlag"; // Standardverdi for kartlag
                if (Model.layerurl == "https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png")
                {
                    kartlagNavn = "Topografisk";
                }
                else if (Model.layerurl == "https://cache.kartverket.no/v1/wmts/1.0.0/topograatone/default/webmercator/{z}/{y}/{x}.png")
                {
                    kartlagNavn = "Topografisk Gråtone";
                }
                else if (Model.layerurl == "https://cache.kartverket.no/v1/wmts/1.0.0/sjokartraster/default/webmercator/{z}/{y}/{x}.png")
                {
                    kartlagNavn = "Sjøkart";
                }
                else if (Model.layerurl == "https://cache.kartverket.no/v1/wmts/1.0.0/toporaster/default/webmercator/{z}/{y}/{x}.png")
                {
                    kartlagNavn = "Turkart";
                }
            }
            @kartlagNavn
        </p>

        @if (Model.vedlegg != null)
        {
            <p><strong>Vedlegg:</strong> Ja</p>
        }
        else
        {
            <p><strong>Vedlegg:</strong> Nei</p>
        }
    </div>
</div>
@section Scripts {
    <script>
        // Initial map position and zoom-level
        var map = L.map('map').setView([65, 12], 4);

        // Henter layer URL fra modellen
        var layerUrl = '@Model.layerurl';

        // Fjerner eksisterende lag
        map.eachLayer(function (layer) {
            if (!(layer instanceof L.FeatureGroup)) {
                map.removeLayer(layer);
            }
        });

        // Legger til bakgrunnskart
        L.tileLayer(layerUrl, { attribution: '&copy; <a href="https://www.kartverket.no/">Kartverket</a> ' }).addTo(map);

        // Henter GeoJSON-dataen fra modellen
        var geoJsonData = JSON.parse('@Html.Raw(Model.geojson_data)');

        // Legger GeoJSON-dataen til kartet
        var layer = L.geoJSON(geoJsonData).bindPopup('@Model.beskrivelse');
        layer.addTo(map);

        var coordinates = geoJsonData.geometry.coordinates;

        if (geoJsonData.geometry.type === 'LineString') {
            var lineCenter = calculateLineCenter(coordinates);
            map.setView([lineCenter[1], lineCenter[0]], 15); // Fly til linjens sentrum
        } else if (geoJsonData.geometry.type === 'Polygon') {
            var polygonCenter = calculatePolygonCenter(coordinates[0]);
            map.setView([polygonCenter[1], polygonCenter[0]], 15); // Fly til polygonets sentrum
        } else {
            map.setView([coordinates[1], coordinates[0]], 15); // Fly til punktet
        }

        // Funksjon for å beregne sentrum av en linje
        function calculateLineCenter(coordinates) {
            var totalPoints = coordinates.length;
            var sumLat = 0;
            var sumLng = 0;

            for (var i = 0; i < totalPoints; i++) {
                sumLat += coordinates[i][1];
                sumLng += coordinates[i][0];
            }

            var centerLat = sumLat / totalPoints;
            var centerLng = sumLng / totalPoints;

            return [centerLng, centerLat];
        }

        // Funksjon for å beregne sentrum av et polygon
        function calculatePolygonCenter(coordinates) {
            var totalPoints = coordinates.length;
            var sumLat = 0;
            var sumLng = 0;

            for (var i = 0; i < totalPoints; i++) {
                sumLat += coordinates[i][1];
                sumLng += coordinates[i][0];
            }

            var centerLat = sumLat / totalPoints;
            var centerLng = sumLng / totalPoints;

            return [centerLng, centerLat];
        }
    </script>
}